// <auto-generated />
using System;
using HousingComplex.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HousingComplex.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230131031204_InitialMigrate")]
    partial class InitialMigrate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HousingComplex.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("Varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("FisrtName")
                        .IsRequired()
                        .HasColumnType("Varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("Varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("Varchar(13)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("Varchar(5)")
                        .HasColumnName("postal_code");

                    b.Property<Guid>("UserCredentialId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_credential_id");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserCredentialId");

                    b.ToTable("m_customer");
                });

            modelBuilder.Entity("HousingComplex.Entities.Developer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("Varchar(13)")
                        .HasColumnName("phone_number");

                    b.Property<Guid>("UserCredentialId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_credential_id");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserCredentialId");

                    b.ToTable("m_developer");
                });

            modelBuilder.Entity("HousingComplex.Entities.HouseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("Varchar(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("HousingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("housing_id");

                    b.Property<Guid?>("ImageHouseTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("image_id");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<Guid>("SpesificationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("specification_id");

                    b.Property<int>("StockUnit")
                        .HasColumnType("int")
                        .HasColumnName("stock_unit");

                    b.HasKey("Id");

                    b.HasIndex("HousingId");

                    b.HasIndex("ImageHouseTypeId");

                    b.HasIndex("SpesificationId");

                    b.ToTable("m_house_type");
                });

            modelBuilder.Entity("HousingComplex.Entities.Housing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("Varchar(50)")
                        .HasColumnName("city");

                    b.Property<Guid>("DeveloperId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("developer_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("OpenTime")
                        .IsRequired()
                        .HasColumnType("Varchar(50)")
                        .HasColumnName("open_time");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.ToTable("m_housing");
                });

            modelBuilder.Entity("HousingComplex.Entities.ImageHouseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content_type");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("filename");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("filepath");

                    b.Property<string>("FileSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("filesize");

                    b.HasKey("Id");

                    b.ToTable("m_image_house_type");
                });

            modelBuilder.Entity("HousingComplex.Entities.Meet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("HousingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("housing_id");

                    b.Property<bool>("IsMeet")
                        .HasColumnType("bit")
                        .HasColumnName("is_meet");

                    b.Property<string>("MeetDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("meet_date");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HousingId");

                    b.ToTable("m_meet");
                });

            modelBuilder.Entity("HousingComplex.Entities.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("trans_date");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("t_purchase");
                });

            modelBuilder.Entity("HousingComplex.Entities.PurchaseDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<Guid>("HouseTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("house_type_id");

                    b.Property<Guid>("HousingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("housing_id");

                    b.Property<long>("Nominal")
                        .HasColumnType("bigint")
                        .HasColumnName("nominal");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("purchase_id");

                    b.Property<string>("ReferencePg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reference_pg");

                    b.HasKey("Id");

                    b.HasIndex("HouseTypeId");

                    b.HasIndex("HousingId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("t_purchase_detail");
                });

            modelBuilder.Entity("HousingComplex.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("ERole")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("m_role");
                });

            modelBuilder.Entity("HousingComplex.Entities.Spesification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int")
                        .HasColumnName("bathrooms");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int")
                        .HasColumnName("bedrooms");

                    b.Property<bool>("Carport")
                        .HasColumnType("bit")
                        .HasColumnName("carport");

                    b.Property<int>("Kitchens")
                        .HasColumnType("int")
                        .HasColumnName("kitchens");

                    b.Property<bool>("SecondFloor")
                        .HasColumnType("bit")
                        .HasColumnName("second_floor");

                    b.Property<bool>("SwimmingPool")
                        .HasColumnType("bit")
                        .HasColumnName("swimming_pool");

                    b.HasKey("Id");

                    b.ToTable("m_spesification");
                });

            modelBuilder.Entity("HousingComplex.Entities.UserCredential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("m_user_credential");
                });

            modelBuilder.Entity("HousingComplex.Entities.Customer", b =>
                {
                    b.HasOne("HousingComplex.Entities.UserCredential", "UserCredential")
                        .WithMany()
                        .HasForeignKey("UserCredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCredential");
                });

            modelBuilder.Entity("HousingComplex.Entities.Developer", b =>
                {
                    b.HasOne("HousingComplex.Entities.UserCredential", "UserCredential")
                        .WithMany()
                        .HasForeignKey("UserCredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCredential");
                });

            modelBuilder.Entity("HousingComplex.Entities.HouseType", b =>
                {
                    b.HasOne("HousingComplex.Entities.Housing", "Housing")
                        .WithMany()
                        .HasForeignKey("HousingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingComplex.Entities.ImageHouseType", "ImageHouseType")
                        .WithMany()
                        .HasForeignKey("ImageHouseTypeId");

                    b.HasOne("HousingComplex.Entities.Spesification", "Spesification")
                        .WithMany()
                        .HasForeignKey("SpesificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Housing");

                    b.Navigation("ImageHouseType");

                    b.Navigation("Spesification");
                });

            modelBuilder.Entity("HousingComplex.Entities.Housing", b =>
                {
                    b.HasOne("HousingComplex.Entities.Developer", "Developer")
                        .WithMany()
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("HousingComplex.Entities.Meet", b =>
                {
                    b.HasOne("HousingComplex.Entities.Customer", "Customer")
                        .WithMany("Meets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingComplex.Entities.Housing", "Housing")
                        .WithMany("Meets")
                        .HasForeignKey("HousingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Housing");
                });

            modelBuilder.Entity("HousingComplex.Entities.Purchase", b =>
                {
                    b.HasOne("HousingComplex.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("HousingComplex.Entities.PurchaseDetail", b =>
                {
                    b.HasOne("HousingComplex.Entities.HouseType", "HouseType")
                        .WithMany()
                        .HasForeignKey("HouseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingComplex.Entities.Housing", "Housing")
                        .WithMany()
                        .HasForeignKey("HousingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HousingComplex.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HouseType");

                    b.Navigation("Housing");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("HousingComplex.Entities.UserCredential", b =>
                {
                    b.HasOne("HousingComplex.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HousingComplex.Entities.Customer", b =>
                {
                    b.Navigation("Meets");
                });

            modelBuilder.Entity("HousingComplex.Entities.Housing", b =>
                {
                    b.Navigation("Meets");
                });

            modelBuilder.Entity("HousingComplex.Entities.Purchase", b =>
                {
                    b.Navigation("PurchaseDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
